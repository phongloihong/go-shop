// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/phongloihong/go-shop/services/user-service/external/gen/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceRegisterProcedure is the fully-qualified name of the UserService's Register RPC.
	UserServiceRegisterProcedure = "/user.v1.UserService/Register"
	// UserServiceLoginProcedure is the fully-qualified name of the UserService's Login RPC.
	UserServiceLoginProcedure = "/user.v1.UserService/Login"
	// UserServiceChangePasswordProcedure is the fully-qualified name of the UserService's
	// ChangePassword RPC.
	UserServiceChangePasswordProcedure = "/user.v1.UserService/ChangePassword"
	// UserServiceGetProfileProcedure is the fully-qualified name of the UserService's GetProfile RPC.
	UserServiceGetProfileProcedure = "/user.v1.UserService/GetProfile"
	// UserServiceGetPublicProfileProcedure is the fully-qualified name of the UserService's
	// GetPublicProfile RPC.
	UserServiceGetPublicProfileProcedure = "/user.v1.UserService/GetPublicProfile"
)

// UserServiceClient is a client for the user.v1.UserService service.
type UserServiceClient interface {
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error)
	GetPublicProfile(context.Context, *connect.Request[v1.GetPublicProfileRequest]) (*connect.Response[v1.GetPublicProfileResponse], error)
}

// NewUserServiceClient constructs a client for the user.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_user_v1_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+UserServiceRegisterProcedure,
			connect.WithSchema(userServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+UserServiceLoginProcedure,
			connect.WithSchema(userServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[v1.ChangePasswordRequest, v1.ChangePasswordResponse](
			httpClient,
			baseURL+UserServiceChangePasswordProcedure,
			connect.WithSchema(userServiceMethods.ByName("ChangePassword")),
			connect.WithClientOptions(opts...),
		),
		getProfile: connect.NewClient[v1.GetProfileRequest, v1.GetProfileResponse](
			httpClient,
			baseURL+UserServiceGetProfileProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetProfile")),
			connect.WithClientOptions(opts...),
		),
		getPublicProfile: connect.NewClient[v1.GetPublicProfileRequest, v1.GetPublicProfileResponse](
			httpClient,
			baseURL+UserServiceGetPublicProfileProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetPublicProfile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	register         *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	login            *connect.Client[v1.LoginRequest, v1.LoginResponse]
	changePassword   *connect.Client[v1.ChangePasswordRequest, v1.ChangePasswordResponse]
	getProfile       *connect.Client[v1.GetProfileRequest, v1.GetProfileResponse]
	getPublicProfile *connect.Client[v1.GetPublicProfileRequest, v1.GetPublicProfileResponse]
}

// Register calls user.v1.UserService.Register.
func (c *userServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Login calls user.v1.UserService.Login.
func (c *userServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// ChangePassword calls user.v1.UserService.ChangePassword.
func (c *userServiceClient) ChangePassword(ctx context.Context, req *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// GetProfile calls user.v1.UserService.GetProfile.
func (c *userServiceClient) GetProfile(ctx context.Context, req *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error) {
	return c.getProfile.CallUnary(ctx, req)
}

// GetPublicProfile calls user.v1.UserService.GetPublicProfile.
func (c *userServiceClient) GetPublicProfile(ctx context.Context, req *connect.Request[v1.GetPublicProfileRequest]) (*connect.Response[v1.GetPublicProfileResponse], error) {
	return c.getPublicProfile.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the user.v1.UserService service.
type UserServiceHandler interface {
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error)
	GetPublicProfile(context.Context, *connect.Request[v1.GetPublicProfileRequest]) (*connect.Response[v1.GetPublicProfileResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_user_v1_user_proto.Services().ByName("UserService").Methods()
	userServiceRegisterHandler := connect.NewUnaryHandler(
		UserServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(userServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceLoginHandler := connect.NewUnaryHandler(
		UserServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(userServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceChangePasswordHandler := connect.NewUnaryHandler(
		UserServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(userServiceMethods.ByName("ChangePassword")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetProfileHandler := connect.NewUnaryHandler(
		UserServiceGetProfileProcedure,
		svc.GetProfile,
		connect.WithSchema(userServiceMethods.ByName("GetProfile")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetPublicProfileHandler := connect.NewUnaryHandler(
		UserServiceGetPublicProfileProcedure,
		svc.GetPublicProfile,
		connect.WithSchema(userServiceMethods.ByName("GetPublicProfile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceRegisterProcedure:
			userServiceRegisterHandler.ServeHTTP(w, r)
		case UserServiceLoginProcedure:
			userServiceLoginHandler.ServeHTTP(w, r)
		case UserServiceChangePasswordProcedure:
			userServiceChangePasswordHandler.ServeHTTP(w, r)
		case UserServiceGetProfileProcedure:
			userServiceGetProfileHandler.ServeHTTP(w, r)
		case UserServiceGetPublicProfileProcedure:
			userServiceGetPublicProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.Register is not implemented"))
}

func (UnimplementedUserServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.Login is not implemented"))
}

func (UnimplementedUserServiceHandler) ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.ChangePassword is not implemented"))
}

func (UnimplementedUserServiceHandler) GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.GetProfile is not implemented"))
}

func (UnimplementedUserServiceHandler) GetPublicProfile(context.Context, *connect.Request[v1.GetPublicProfileRequest]) (*connect.Response[v1.GetPublicProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.GetPublicProfile is not implemented"))
}
